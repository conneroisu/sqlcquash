package cmd

import (
	"bytes"
	"io"
	"io/fs"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/spf13/cobra"
	"gopkg.in/yaml.v3"
)

const header = `-- Code generated by sqlcquash. DO NOT EDIT.
-- versions: 
--	sqlcquash: v0.0.1
`

// combineCmd represents the combine command
var combineCmd = &cobra.Command{
	Use:   "combine",
	Short: "Combines defined schemas, queries and seeds into single output files as defined in the config file. (`sqlcquash.yaml`)",
	Long: `
Combines defined schemas, queries and seeds into single output files as defined in the config file ("sqlcquash.yaml").
	`,
	Example: `
sqlcquash combine
	`,
	RunE: func(cmd *cobra.Command, _ []string) error {
		configPath, err := FindConfigFile()
		if err != nil {
			return err
		}
		cmd.Printf("Using config file: %s\n", configPath)
		configCnt, err := readFile(configPath)
		if err != nil {
			return err
		}
		cmd.Printf("Reading config file: %s\n", configCnt)
		config := Config{}
		err = yaml.Unmarshal([]byte(configCnt), &config)
		if err != nil {
			return err
		}
		cmd.Printf("Found %d instances in config file: %s\n", len(config.Dbs), configPath)
		dir, err := FindConfigDir(configPath)
		if err != nil {
			return err
		}
		cmd.Printf("Working in directory: %s\n", dir)
		err = os.Chdir(dir)
		if err != nil {
			return err
		}
		cmd.Printf("Changed directory to: %s\n", dir)
		for _, inst := range config.Dbs {
			err = handleInstance(cmd, inst)
			if err != nil {
				return err
			}
		}
		return nil
	},
}

func handleInstance(
	cmd *cobra.Command,
	inst DbConfig,
) error {
	schemas, err := catFiles(inst.SchemasPath)
	if err != nil {
		return err
	}
	queries, err := catFiles(inst.QueriesPath)
	if err != nil {
		return err
	}
	seeds, err := catFiles(inst.SeedsPath)
	if err != nil {
		return err
	}
	schemaFile, err := os.Create(inst.OutputSchema)
	if err != nil {
		return err
	}
	defer schemaFile.Close()
	queryFile, err := os.Create(inst.OutputQueries)
	if err != nil {
		return err
	}
	defer queryFile.Close()
	seedFile, err := os.Create(inst.OutputSeeds)
	if err != nil {
		return err
	}
	defer seedFile.Close()
	_, err = schemaFile.WriteString(
		header + "\n" +
			strings.Join(schemas, "\n"))
	if err != nil {
		return err
	}

	_, err = queryFile.WriteString(
		header + "\n" +
			strings.Join(queries, "\n"))
	if err != nil {
		return err
	}
	_, err = seedFile.WriteString(
		header + "\n" +
			strings.Join(seeds, "\n"))
	if err != nil {
		return err
	}
	if inst.Fmt == "" {
		cmd.Printf("Skipping Formatting as no formatter was configured\n")
		return nil
	}
	cmd.Printf("Running formatter: %s\n", inst.Fmt)
	// pipe each file that contains the string "queries" to the formatter
	// and write the output to the file
	err = filepath.WalkDir(".", walkDirFn(cmd, &inst))
	if err != nil {
		return err
	}
	return nil
}

func walkDirFn(cmd *cobra.Command, inst *DbConfig) func(path string, d fs.DirEntry, err error) error {
	return func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		ext := filepath.Ext(path)
		if ext != ".sql" {
			cmd.Printf("Skipping file: %s\n", d.Name())
			return nil
		}

		if strings.Contains(path, inst.FmtContains) {
			// create a buffer
			var b bytes.Buffer
			split := strings.Split(inst.Fmt, " ")
			cmd := exec.Command(split[0], split[1:]...)
			cmd.Stdin, err = os.Open(path)
			if err != nil {
				return err
			}
			cmd.Stdout = &b
			cmd.Stderr = os.Stderr
			err := cmd.Run()
			if err != nil {
				return err
			}

			f, err := os.Create(path)
			if err != nil {
				return err
			}
			defer f.Close()
			_, err = f.WriteString(b.String())
			if err != nil {
				return err
			}

			return nil
		}
		return nil
	}
}

func catFiles(path string) ([]string, error) {
	files, err := filepath.Glob(path)
	if err != nil {
		return nil, err
	}
	var content []string
	for _, file := range files {
		cnt, err := readFile(file)
		if err != nil {
			return nil, err
		}
		content = append(content, cnt)
	}
	return content, nil
}

func readFile(path string) (string, error) {
	file, err := os.Open(path)
	if err != nil {
		return "", err
	}
	defer file.Close()
	content, err := io.ReadAll(file)
	if err != nil {
		return "", err
	}
	return string(content), nil
}
